AND -> DELIMITER
// статическая переменная, которая используется для разбиения строки на подстроки
// новое имя характеризует абстрактную сущность, вместо конкретного значения переменной

PORT -> SOCKET_PORT
// овое имя переменной более точно указывает, что это порт сокета

fileEntity.setCategoryId(1) -> fileEntity.setCategoryId(ATTACHMENT_FILE_CATEGORY_ID)
// категория файла проставлялась как магическое число, так как пока имеет единственное значение
// чтобы удалить магиское число, создал статическую переменную ATTACHMENT_FILE_CATEGORY_ID

new Event(1, UUID.randomUUID().toString(), OffsetDateTime.now(), mailingKey) ->
new Event(EVENT_VERSION, UUID.randomUUID().toString(), OffsetDateTime.now(), mailingKey)
// при создании объекта Event, версия указывалась как магическое число
// чтобы удалить магиское число, создал статическую переменную EVENT_VERSION

CLIENT_LOGIN -> CLIENT_LOGIN_HEADER
// статическая переменная, которая используется для авторизации запроса
// новое имя характеризует абстрактную сущность, вместо конкретного значения переменной

ENABLED -> ENABLED_PROPERTY_NAME
// новое имя характеризует абстрактную сущность, вместо конкретного значения переменной

Pattern.compile("\\d+").matcher(value).matches() -> NUMBER_PATTERN.matcher(value).matches()
// при поиски цифровых символлов строки использовалось регулярное выражения напрямую
// для повышения читаемости кода вынес регулярное выражение в переменную NUMBER_PATTERN

USER -> USER_FILTER
// статическая переменная, которая используется в качестве фильтра в потоке
// новое имя характеризует абстрактную сущность, вместо конкретного значения переменной

LOGO_PATH -> DEFAULT_LOGO_FILE_PATH
// новое имя переменной более точно указывает, что это путь к файлу логотипа по умолчанию

COST -> STANDARD_SHIPPING_COST
// новое имя переменной стало более точным, указывая, что это стандартная плата за доставку

OK -> SUCCESS_RESPONSE_CODE
// новое имя переменной стало более точным, указывая, что это код успешного ответа

for (int retryCount = 0; retryCount < 5; retryCount++) -> for (int retryCount = 0; retryCount < MAX_RETRIES; retryCount++)
// в цикле число сколько раз повторять попытку получения данных использовалось как магическое число
// чтобы удалить магиское число, создал статическую переменную MAX_RETRIES