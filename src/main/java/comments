3.1
1.
/*
A task that runs daily at 6AM MSC
 */
@Scheduled(cron = "${expression.delete-link}", zone = "Europe/Moscow")
public void deleteLinkMessagesAndArchiveFiles() {
    ...
}
// Есть задача, которая запускается в 6 часов по московскому времени.
// Cron-expression задаётся перменной окружения, которая храниться в волте.
// Чтобы при чтении кода не пришлось идти в волт(если есть доступ)смотреть выражение, которое ещё прийдётся гуглить был написан комментарий,
// поясняющий когда запускается эта задача


2.
public void analyzeInputString(String input) {
     ...
     /*
     Регулярное выражение для проверки строки на соответсвие email-адреса
      */
     Pattern pattern = Pattern.compile("^[\\w-\\.]+@[\\w-]+(\\.[\\w-]+)*\\.[a-z]{2,}$");
     ...
}
// по регулярному выражению сложно понять на что оно проверяет, поэтому уместно оставить кооментарий


3.
/*
 Метод реализует формулу Герона для вычисления площади треугольника
 по длинам его сторон a, b и c:
 S = sqrt(s * (s - a) * (s - b) * (s - c)), где s = (a + b + c) / 2
 */
public double calculateTriangleArea(double a, double b, double c) {
    ..
}
// в данном примере комментарий может быть уместен, так как используется математическая формула, требующая пояснений


4.
/*
 Данный класс реализует правила расчета налога на доход физических лиц
 в соответствии с налоговым законодательством на 2023г
*/
public class IncomeTaxCalculator {
    ...
}
// в данном примере комментарий помогает в объяснение бизнес-логики
// и может помочь при внесении изменений в связи с изменениями законодательства


5.
/*
 * Данный метод реализует алгоритм LZW (Lempel–Ziv–Welch) для сжатия текстовых данных
 */
public byte[] compressData(byte[] input) {
    ...
}
// в данном примере комментарий может быть уместен,
// так как он описыывает какой алгоритм сжатия данных используется


6.
// Проверить включена ли рассылка и не привышает ли она установленных лимитов
if (mailing.isWorksAndWithinLimits){
    ...
}
// такой вариант комментария допустим, так как названия функций на английском воспринимаются далеко не так
// нативно и естественно и наглядно, как на русском. Комментарий поможет быстрее разобраться в коде


7.
/**
 * Данный класс реализует модель машинного обучения для
 * прогнозирования оттока клиентов. Алгоритм основан на
 * анализе исторических данных о клиентах (демографические
 * характеристики, паттерны поведения, использование продуктов
 * и услуг) и построении предиктивной модели, которая позволяет
 * идентифицировать клиентов, склонных к оттоку в будущем.
 */
public class ChurnPredictionModel {
    ...
}
// здесь комментарий используется для описания нетривиальной бизнес-логики класса

3.2
// Сам никогда раньше не оставлял комментарии к своему коду, но встретил это на рабочем проекте
Было:
public boolean validate(MailingDto mailing, List<MessageDto> messages) {
        ...
        MessageDto message = messages.get(0); //as there's only one obj in list
		...
}
Стало:
public boolean validate(@NonNull MailingDto mailing, @NonNull List<MessageDto> messages) {
        ...
        for (MessageDto message : messages) {
            ...
		}
		...
}
// вместо того, чтобы оставлять комментрий, указывающий на то, что в данной реализации лист хранит только один объект
// можно изменить код так, чтобы обработка объектов происходила вне зависимости от того, сколько в листе объектов