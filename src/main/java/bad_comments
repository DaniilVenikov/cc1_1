1. Было:
// Увеличиваем счетчик
counter++;
Стало:
// Увеличиваем счетчик количества обработанных элементов
counter++;
// улучшение по пунтку 3. Бормотание


2. Было:
// Этот метод был добавлен в версии 2.1 приложения для обработки новых требований,
// связанных с расчетом скидок. Ранее этот функционал был реализован в отдельном модуле,
// но теперь было принято решение интегрировать его в основной код приложения для
// повышения производительности и удобства использования.
private int calculateDiscount(Order order);
Стало:
// Рассчитывает скидку на заказ
private int calculateDiscount(Order order);
// улучшение по пунтку 8. Слишком много информации


3. Было:
// Работа с датами
LocalDate start = LocalDate.of(2024, 6, 12);
Period period = Period.between(start, LocalDate.now());
Стало:
// Вычисляем период между текущей датой и датой 12 июня 2024 года
LocalDate start = LocalDate.of(2024, 6, 12);
Period period = Period.between(date1, LocalDate.now());
// улучшение по пунтку 1: Неочевидные комментарии


4. Было:
// Обновляем список
public void updateList(List<String> items, String value) {
     ...
}
Стало:
// Добавляем новое значение value в конец списка items
public void updateList(List<String> items, String value) {
     ...
}
// улучшение по пунтку 1: Неочевидные комментарии


5. Было:
// Проверяем доступ
public void checkAccess(User user) {
    if (user.isAdmin()) {
        allowAccess();
    }
}
Стало:
// Проверяем, является ли пользователь администратором, и если да, предоставляем доступ
public void checkAccess(User user) {
}
// улучшение по пунтку 3. Бормотание


6. Было:
/**
 * Этот метод сортирует массив целых чисел с помощью алгоритма пузырьковой сортировки.
 * Пузырьковая сортировка - это простой алгоритм сортировки, который многократно проходит по списку,
 * сравнивает соседние элементы и меняет их местами, если они расположены в неправильном порядке.
 * Проход по списку повторяется до тех пор, пока список не будет отсортирован.
 * Алгоритм назван так за то, что меньшие элементы "пузырятся" в верхней части списка.
 * Несмотря на свою простоту, пузырьковая сортировка неэффективна для больших списков и нецелесообразна для реальных приложений сортировки.
 */
public void sort(int[] arr) {
     ...
}
Стало:
/**
 * Сортирует массив целых чисел методом пузырьковой сортировки.
 */
public void sort(int[] arr) {
     ...
}
// улучшение по пунтку 5: Избыточные комментарии


7. Было:
/**
  * Этот класс представляет собой соединение с базой данных.
  * Первоначально он был создан 3 апреля 2021 года.
  * С тех пор он был несколько раз изменен, чтобы добавить больше функциональности и исправить ошибки.
  * Этот класс используется для установки соединения с базой данных и выполнения запросов.
  * Он использует JDBC API для взаимодействия с базой данных.
  * Класс включает методы для подключения к базе данных, выполнения запросов и закрытия соединения.
 */
public class DatabaseConnection {
     ...
}
Стало:
/**
 * Класс для подключения к базе данных и выполнения запросов.
 */
public class DatabaseConnection {
     ...
}
// улучшение по пунтку 8. Слишком много информации


8. Было:
// Система поддерживает различные способы оплаты, включая кредитные карты, PayPal и банковские переводы.
// Обработкой платежей занимается класс PaymentProcessor.
// Он обеспечивает безопасность транзакций и шифрование платежных данных.
public void processPayment(PaymentDetails paymentDetails) {
     ...
}
Стало:
// Обрабатывает платеж с использованием заданных платежных данных
public void processPayment(PaymentDetails paymentDetails) {
     ...
}
// улучшение по пунтку 9. Нелокальная информация


9. Было:
// Система уведомлений отправляет различные типы писем, включая письма с проверкой учетной записи, сбросом пароля и рекламные письма.
// Класс EmailSender отвечает за отправку писем.
// Используется SMTP-сервер для отправки писем
public void sendEmail(String recipient, String subject, String body) {
     ...
}
Стало:
// Отправляет письмо с заданным получателем, темой и содержимым
public void sendEmail(String recipient, String subject, String body) {
     ...
}
// улучшение по пунтку 9. Нелокальная информация


10. Было:
// Этот метод переворачивает заданную строку.
public String modifyString(String str) {
     ...
}
Стало:
public String reverseString(String str) {
     ...
}
// улучшение по пунтку 12. Не используйте комментарии там, где можно использовать функцию или переменную


11. Было:
// Данный метод вычисляет факториал числа
public int calculate(int number) {
     ...
}
Стало:
public int factorial(int number) {
     ...
}
// улучшение по пунтку 12. Не используйте комментарии там, где можно использовать функцию или переменную


12. Было:
// Данный метод форматирует дату
public String formatDate(Date date) {
     ...
}
Стало:
// Форматирует дату как 'yyyy-MM-dd'
public String formatDate(Date date) {
     ...
}
// улучшение по пунтку 1. Неочевидные комментарии


13. Было:
// Функция для вычисления площади круга
private double calculateArea() {
    ...
}
Стало:
double calculateCircleArea(double radius) {
    ...
}
// улучшение по пунтку 12. Не используйте комментарии там, где можно использовать функцию или переменную


14. Было:
// Функция для загрузки данных из базы данных
private List<Order> loadData(String title) {
      ...
}
Стало:
private List<DataObject> loadDataFromDatabase(String title) {
       ...
}
// улучшение по пунтку 12. Не используйте комментарии там, где можно использовать функцию или переменную


15. Было:
// Этот класс клиентского API первой версии, сейчас используется API второй версии
// public class ClientApiV1 {
//      ...
// }
Стало:
// Код удален, так как больше не используется
// улучшение по пунтку 11. Закомментированный код